import React, { useState } from 'react';
import '../styles/RegisterModal.css';
import RegistrationConfirmationModal from './RegistrationConfirmationModal';

interface RegisterModalProps {
  isOpen: boolean;
  onClose: () => void;
}

const RegisterModal: React.FC<RegisterModalProps> = ({ isOpen, onClose }) => {
  const [firstName, setFirstName] = useState('');
  const [lastName, setLastName] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [notification, setNotification] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [isLoading, setIsLoading] = useState(false);
  const [showConfirmationModal, setShowConfirmationModal] = useState(false);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  const validateName = (value: string): boolean => {
    return /^[–∞-—è–ê-–Ø—ñ–Ü—ó–á—î–Ña-zA-Z\s]{2,30}$/.test(value);
  };

  const validateEmail = (value: string): boolean => {
    return /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,50}$/.test(value);
  };

  const validatePassword = (value: string): boolean => {
    return /^(?=.*[A-Za-z])(?=.*\d).{8,30}$/.test(value);
  };

  const validateForm = (): boolean => {
    const newErrors: Record<string, string> = {};

    if (!validateName(firstName)) {
      newErrors.firstName =
        "–Ü–º'—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ 2-30 —Å–∏–º–≤–æ–ª—ñ–≤ (–±—É–∫–≤–∏ —Ç–∞ –ø—Ä–æ–±—ñ–ª–∏)";
    }

    if (!validateName(lastName)) {
      newErrors.lastName =
        '–ü—Ä—ñ–∑–≤–∏—â–µ –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ 2-30 —Å–∏–º–≤–æ–ª—ñ–≤ (–±—É–∫–≤–∏ —Ç–∞ –ø—Ä–æ–±—ñ–ª–∏)';
    }

    if (!validateEmail(email)) {
      newErrors.email = '–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π email';
    }

    if (!validatePassword(password)) {
      newErrors.password =
        '–ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 8 —Å–∏–º–≤–æ–ª—ñ–≤, –±—É–∫–≤–∏ —Ç–∞ —Ü–∏—Ñ—Ä–∏';
    }

    if (password !== confirmPassword) {
      newErrors.confirmPassword = '–ü–∞—Ä–æ–ª—ñ –Ω–µ –∑–±—ñ–≥–∞—é—Ç—å—Å—è';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) {
      return;
    }

    setIsLoading(true);

    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–∏–º—É–ª—è—Ü–∏—è)
    setTimeout(() => {
      console.log('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è:', {
        firstName,
        lastName,
        email,
        password,
        notification,
      });
      setIsLoading(false);
      setShowConfirmationModal(true);
      // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
      setFirstName('');
      setLastName('');
      setEmail('');
      setPassword('');
      setConfirmPassword('');
      setNotification(false);
      setErrors({});
    }, 1000);
  };

  const handleClose = () => {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    setErrors({});
    setShowConfirmationModal(false);
    onClose();
  };

  const clearError = (field: string) => {
    if (errors[field]) {
      setErrors((prev) => {
        const newErrors = { ...prev };
        delete newErrors[field];
        return newErrors;
      });
    }
  };

  if (!isOpen) return null;

  return (
    <div className="register-modal-overlay">
      <div className="register-modal" onClick={(e) => e.stopPropagation()}>
        <button className="close" onClick={handleClose} aria-label="–ó–∞–∫—Ä–∏—Ç–∏" />
        <h2>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è</h2>

        <form onSubmit={handleSubmit}>
          <div className="input-group">
            <input
              type="text"
              placeholder="–Ü–º'—è"
              value={firstName}
              onChange={(e) => {
                setFirstName(e.target.value);
                clearError('firstName');
              }}
              className={errors.firstName ? 'error' : ''}
            />
            {errors.firstName && (
              <div className="error-message">{errors.firstName}</div>
            )}
          </div>

          <div className="input-group">
            <input
              type="text"
              placeholder="–ü—Ä—ñ–∑–≤–∏—â–µ"
              value={lastName}
              onChange={(e) => {
                setLastName(e.target.value);
                clearError('lastName');
              }}
              className={errors.lastName ? 'error' : ''}
            />
            {errors.lastName && (
              <div className="error-message">{errors.lastName}</div>
            )}
          </div>

          <div className="input-group">
            <input
              type="email"
              placeholder="Email"
              value={email}
              onChange={(e) => {
                setEmail(e.target.value);
                clearError('email');
              }}
              className={errors.email ? 'error' : ''}
            />
            {errors.email && (
              <div className="error-message">{errors.email}</div>
            )}
          </div>

          <div className="input-group">
            <div className="password-input">
              <input
                type={showPassword ? 'text' : 'password'}
                placeholder="–ü–∞—Ä–æ–ª—å"
                value={password}
                onChange={(e) => {
                  setPassword(e.target.value);
                  clearError('password');
                }}
                className={errors.password ? 'error' : ''}
              />
              <button
                type="button"
                className="show-password"
                onClick={() => setShowPassword(!showPassword)}
              >
                {showPassword ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}
              </button>
            </div>
            {errors.password && (
              <div className="error-message">{errors.password}</div>
            )}
            {!errors.password && (
              <div className="tip">
                –ü–∞—Ä–æ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 8 —Å–∏–º–≤–æ–ª—ñ–≤, –±—É–∫–≤–∏ —Ç–∞ —Ü–∏—Ñ—Ä–∏
              </div>
            )}
          </div>

          <div className="input-group">
            <div className="password-input">
              <input
                type={showConfirmPassword ? 'text' : 'password'}
                placeholder="–ü—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ –ø–∞—Ä–æ–ª—å"
                value={confirmPassword}
                onChange={(e) => {
                  setConfirmPassword(e.target.value);
                  clearError('confirmPassword');
                }}
                className={errors.confirmPassword ? 'error' : ''}
              />
              <button
                type="button"
                className="show-password"
                onClick={() => setShowConfirmPassword(!showConfirmPassword)}
              >
                {showConfirmPassword ? 'üëÅÔ∏è' : 'üëÅÔ∏è‚Äçüó®Ô∏è'}
              </button>
            </div>
            {errors.confirmPassword && (
              <div className="error-message">{errors.confirmPassword}</div>
            )}
          </div>

          <div className="actions">
            <button
              type="submit"
              className="register-submit-btn"
              disabled={isLoading}
            >
              {isLoading ? '–û–±—Ä–æ–±–∫–∞...' : '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è'}
            </button>
          </div>
        </form>
      </div>
      <RegistrationConfirmationModal
        isOpen={showConfirmationModal}
        onClose={handleClose}
      />
    </div>
  );
};

export default RegisterModal;
